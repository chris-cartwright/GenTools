<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ parameter name="namespace" type="System.String" #>
<#@ parameter name="className" type="System.String"  #>
<#@ parameter name="functions" type="System.String"  #>

/*

Generated using GenProc Version <#=Assembly.GetExecutingAssembly().GetName().Version #>
Generated on <#=DateTime.Now.ToString("dd MMM HH:mm:ss") #>

*/

using System;
using System.Data.SqlClient;
using System.Sql;

namespace <#=namespace #>
{
	public static class WrappedProcedure
	{
		private SqlCommand _cmd;

		public WrappedProcedure(SqlCommand cmd)
		{
			_cmd = cmd;
		}

		public SqlDataReader Reader()
		{
			try
			{
				_cmd.Connection.Open();
				return _cmd.ExecuteReader();
			}
			catch(Exception)
			{
				if(_cmd.Connection.State == ConnectionState.Open)
					_cmd.Close();

				ErrorLogger.Log(ex);
			}

			return null;
		}

		public int NonQuery()
		{
			try
			{
				_cmd.Connection.Open();
				return _cmd.ExecuteNonQuery();
			}
			catch(Exception)
			{
				ErrorLogger.Log(ex);
			}
			finally
			{
				if(_cmd.Connection.State == ConnectionState.Open)
					_cmd.Close();
			}

			return -1;
		}

		public T Scalar<T>() where T: IConvertible
		{
			try
			{
				_cmd.Connection.Open();
				return Convert.ChangeType(_cmd.ExecuteScalar(), typeof(T));
			}
			catch(Exception)
			{
				return default(T);
			}
			finally
			{
				if(_cmd.Connection.State == ConnectionState.Open)
					_cmd.Close();
			}
		}
	}

	public static class <#=className #>
	{
		<#=functions.Trim() #>
	}
}
