<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="name" type="System.String"  #>
<#@ parameter name="parameters" type="GenProc.Parameter[]"  #>
<#@ parameter name="procedure" type="System.String"  #>
<#

// Line spacing matters!
// Don't put empty lines around this block

Func<GenProc.Parameter, StringBuilder, StringBuilder> GenParam = delegate(GenProc.Parameter p, StringBuilder sbp)
{
	if(p.Output)
		sbp.Append("ref ");

	sbp.Append(p.Type.Name).Append(" ").Append(p.Name.TrimStart('@'));

	if(!String.IsNullOrEmpty(p.Default))
	{
		sbp.Append(" = ");
		sbp.Append(p.Default);
	}

	return sbp;
};

StringBuilder sb = new StringBuilder();
foreach(GenProc.Parameter p in parameters)
	GenParam(p, sb).Append(", ");

#>
		public static SqlDataReader <#=name #>(<#=sb.ToString().TrimEnd(',', ' ') #>)
		{
			SqlConnection conn = new SqlConnection("");
			SqlCommand cmd = new SqlCommand("<#=procedure #>", conn);
			cmd.CommandType = CommandType.StoredProcedure;

			try
			{
				conn.Open();
				return cmd.ExecuteReader();
			}
			catch(Exception ex)
			{
				ErrorLogger.Log(ex);
			}
			finally
			{
				if(conn.IsOpen)
					conn.Close();
			}

			return null;
		}

