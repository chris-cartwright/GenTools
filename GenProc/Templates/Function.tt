<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ parameter name="procedure" type="GenProc.Procedure"  #>
<#

// Line spacing matters!
// Don't put empty lines around this block

Func<GenProc.Parameter, StringBuilder, StringBuilder> GenParam = delegate(GenProc.Parameter p, StringBuilder sbp)
{
	if(p.Type.IsTable)
		sbp.Append("TableTypes.");

	sbp.Append(p.Type.Name);
	if(p.IsNull && p.Type.IsValueType && !p.Type.IsArray)
		sbp.Append("?");

	if(p.Type.IsArray)
		sbp.Append("[]");

	sbp.Append(" ").Append(p.NameClean);

	if(p.IsNull)
		sbp.Append(" = null");
	else if(p.Default != null)
	{
		sbp.Append(" = ");
		if(p.Type == typeof(string))
			sbp.Append("\"");

		sbp.Append(p.Default);

		if(p.Type == typeof(string))
			sbp.Append("\"");
	}
	else if(p.IsOutput)
	{
		sbp.Append(" = null");
	}

	return sbp;
};

StringBuilder sb = new StringBuilder();
foreach(GenProc.Parameter p in procedure.Parameters.Where(p => !p.IsOutput).Where(p => p.Default == null && !p.IsNull))
	GenParam(p, sb).Append(", ");

foreach(GenProc.Parameter p in procedure.Parameters.Where(p => !p.IsOutput).Where(p => p.Default != null || p.IsNull))
	GenParam(p, sb).Append(", ");

#>
		public class <#=procedure.NameClean #> : WrappedProcedure
		{
			<# foreach(GenProc.Parameter p in procedure.Parameters) { #>public <# if(p.Type.IsTable) { #>TableTypes.<# } #><#=p.Type.Name #><# if(p.IsNull && p.Type.IsValueType && !p.Type.IsArray) { #>?<# } else if(p.Type.IsTable) { #>[]<# } #> <#=p.NameClean #>;
			<# } #>

			protected override void AssignInputs()
			{
				<# foreach(GenProc.Parameter p in procedure.Parameters) { #>_cmd.Parameters["<#=p.Name #>"].Value = <# if(p.Type.IsTable) { #>TableTypes.<#=p.Type.Name #>.ToDataTable(<# } #><#=p.NameClean #><# if(p.Type.IsTable) { #>)<# } #>;
				<# } #>
			}

			protected override void AssignOutputs()
			{
				<# foreach(GenProc.Parameter p in procedure.Parameters.Where(p => p.IsOutput)) { #><#=p.NameClean #> = <# if(p.IsNull) { #>_cmd.Parameters["<#=p.Name #>"].Value as <#=p.Type.Name #><# if(p.Type.IsValueType && !p.Type.IsArray){ #>?<# } } else { #>(<#=p.Type.Name #>)_cmd.Parameters["<#=p.Name #>"].Value<# } #>;
				<# } #>
			}

			public <#=procedure.NameClean #>(<#=sb.ToString().TrimEnd(',', ' ') #>)
			{
				<# foreach(GenProc.Parameter p in procedure.Parameters.Where(p => !p.IsOutput)) { #>this.<#=p.NameClean #> = <#=p.NameClean #>;
				<# } #>

				SqlConnection conn = new SqlConnection(ConnectionString);
				_cmd = new SqlCommand("<#=procedure.Original #>", conn);
				_cmd.CommandType = CommandType.StoredProcedure;
                <# foreach(GenProc.Parameter p in procedure.Parameters) { #>_cmd.Parameters.Add(new SqlParameter("<#= p.Name #>", SqlDbType.<#=p.SqlType #>, <#=p.Size #>)<# if(p.IsOutput) { #> { Direction = ParameterDirection.Output }<# } #>);
				<# } #>
			}
		}
