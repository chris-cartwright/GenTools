<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="table" type="GenTable.Table" #>
	[Serializable]
	public abstract class <#=table.NameClean #><T> : WrappedTable where T : <#=table.NameClean #><T>, new()
	{
		public static T Populate(Dictionary<string, object> data)
		{
			if(data == null)
				throw new ArgumentNullException("data");

			T ret = new T();
			<# foreach(Column col in table.Columns) { #>if(data.ContainsKey("<#=col.Name #>"))
			{
				ret.<#=col.NameClean #> = <# if(col.IsNull) { #>data["<#=col.Name #>"] as <#=col.Type.Name #><# if(col.Type.IsValueType && !col.Type.IsArray){ #>?<# } #><# } else { #>(<#=col.Type.Name #>)data["<#=col.Name #>"]<# } #>;
			}
			<# } #>

			ret.IsDirty = false;
			return ret;
		}

		<#
		GenTable.Column ident = table.Identity;
		if(ident != null)
		{
			StringBuilder cols = new StringBuilder();
			foreach(Column col in table.Columns)
				cols.Append("[").Append(col.Name).Append("],");

			string columns = cols.ToString().TrimEnd(',');
		#>
		protected static T LoadFull(<#=ident.Type.Name #> id)
		{
			SqlConnection conn = new SqlConnection(ConnectionString);
			SqlCommand cmd = new SqlCommand();
			cmd.Connection = conn;
			cmd.CommandText = "select <#=columns #> from [<#=table.Name #>] where [<#=ident.Name #>]=@ID";
			cmd.Parameters.AddWithValue("@ID", id);

			try
			{
				conn.Open();
				SqlDataReader reader = cmd.ExecuteReader();
				if(!reader.HasRows)
					return null;

				reader.Read();
				T ret = new T();
				<# foreach(Column col in table.Columns) { #>ret.<#=col.NameClean #> = <# if(!col.IsNull) { #>(<#=col.Type.Name #>)reader["<#=col.Name #>"]<# } else { #>reader["<#=col.Name #>"] as <#=col.Type.Name #><# if(col.Type.IsValueType && !col.Type.IsArray) { #>?<# } } #>;
				<# } #>

				ret.IsDirty = false;
				return ret;
			}
			finally
			{
				if(conn.State == ConnectionState.Open)
					conn.Close();
			}
		}
		<#
			cols = new StringBuilder();
			foreach(Column col in table.Columns.Where(c => c.Name != ident.Name))
				cols.Append("[").Append(col.Name).Append("]=@").Append(col.NameClean).Append(",");

			columns = cols.ToString().TrimEnd(',');
		#>
		protected static bool SaveFull(T t)
		{
			SqlConnection conn = new SqlConnection(ConnectionString);
			SqlCommand cmd = new SqlCommand();
			cmd.Connection = conn;
			cmd.CommandText = "update [<#=table.Name #>] set <#=columns #> where [<#=ident.Name #>]=@<#=ident.NameClean #>";
			<# foreach(Column col in table.Columns) { #>cmd.Parameters.AddWithValue("@<#=col.NameClean #>", t.<#=col.NameClean #><# if(col.IsNull) { #> ?? (object)DBNull.Value<# } #>);
			<# } #>

			try
			{
				conn.Open();
				bool ret = cmd.ExecuteNonQuery() > 0;
				if(ret)
					t.IsDirty = false;

				return ret;
			}
			finally
			{
				if(conn.State == ConnectionState.Open)
					conn.Close();
			}
		}
		<#
			cols = new StringBuilder();
			foreach(Column col in table.Columns.Where(c => c.Name != ident.Name))
				cols.Append("[").Append(col.Name).Append("],");

			columns = cols.ToString().TrimEnd(',');

			cols = new StringBuilder();
			foreach(Column col in table.Columns.Where(c => c.Name != ident.Name))
				cols.Append("@").Append(col.NameClean).Append(",");

			string values = cols.ToString().TrimEnd(',');
		#>
		protected static <#=ident.Type.Name #> CreateFull(T t)
		{
			SqlConnection conn = new SqlConnection(ConnectionString);
			SqlCommand cmd = new SqlCommand();
			cmd.Connection = conn;
			cmd.CommandText = "insert into [<#=table.Name #>](<#=columns #>) values (<#=values #>); select scope_identity()";
			<# foreach(Column col in table.Columns.Where(c => c.Name != ident.Name)) { #>cmd.Parameters.AddWithValue("@<#=col.NameClean #>", t.<#=col.NameClean #><# if(col.IsNull) { #> ?? (object)DBNull.Value<# } #>);
			<# } #>

			try
			{
				conn.Open();
				<#=ident.Type.Name #> ret = (<#=ident.Type.Name #>)((decimal)cmd.ExecuteScalar());
				t.IsDirty = false;
				return ret;
			}
			finally
			{
				if(conn.State == ConnectionState.Open)
					conn.Close();
			}
		}
		<# } #>

		<# foreach(Column col in table.Columns) { #>private <#=col.Type.Name #><# if(col.IsNull && col.Type.IsValueType && !col.Type.IsArray) { #>?<# } #> _<#=col.NameClean #>;
		<# } #>

		<# foreach(Column col in table.Columns) { #>public <#=col.Type.Name #><# if(col.IsNull && col.Type.IsValueType && !col.Type.IsArray) { #>?<# } #> <#=col.NameClean #>
		{
			get { return _<#=col.NameClean #>; }
			set { _<#=col.NameClean #> = value; Changed("_<#=col.NameClean #>"); }
		}
		<# } #>

		public virtual void Project(Dictionary<string, object> data)
		{
			if(data == null)
				throw new ArgumentNullException("data");

			<# foreach(Column col in table.Columns) { #>if(data.ContainsKey("<#=col.Name #>"))
			{
				<#=col.NameClean #> = <# if(col.IsNull) { #>data["<#=col.Name #>"] as <#=col.Type.Name #><# if(col.Type.IsValueType && !col.Type.IsArray){ #>?<# } #><# } else { #>(<#=col.Type.Name #>)data["<#=col.Name #>"]<# } #>;
			}
			<# } #>

			IsDirty = false;
		}

		public virtual void CopyFrom<TOther>(TOther other) where TOther : <#=table.NameClean #><T>
		{
			<# foreach(Column col in table.Columns) { #>_<#=col.NameClean #> = other._<#=col.NameClean #>;
			<# } #>
		}
	}
